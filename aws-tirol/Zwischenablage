 marker.addTo(awsLayer);
            if (station.properties.HS) {
                let highlightClass = '';
                if (station.properties.HS > 100) {
                    highlightClass = 'snow-100';
                }
                if (station.properties.HS > 200) {
                    highlightClass = 'snow-200';
                }
                let snowIcon = L.divIcon({ //https://docs.eegeo.com/eegeo.js/v0.1.780/docs/leaflet/L.DivIcon/ - Represents a lightweight icon for markers that uses a simple div element instead of an image.
                    html: `<div class="snow-label ${highlightClass}">${station.properties.HS}</div>`
                })
                let snowMarker = L.marker([
                    station.geometry.coordinates[1],
                    station.geometry.coordinates[0]
                ], {
                    icon: snowIcon
                });
                snowMarker.addTo(snowLayer);
            }


  // Schneehöhenlayer hizufüen  (Mit Farbskalar, aber noch mit Fehler!)
            marker.addTo(awsLayer);
            if (station.properties.HS) {
                let highlightClass = '';
            
                if (station.properties.HS <= 10) {
                    highlightClass = 'snow-1to10';
                }
                if (station.properties.HS <= 25) {
                    highlightClass = "snow-10to25"
                }
                if (station.properties.HS <= 50) {
                    highlightClass = "snow-26to50"
                }
                if (station.properties.HS <= 100) {
                    highlightClass = "snow-51to100"
                }
                if (station.properties.HS <= 200) {
                    highlightClass = "snow-101to200"
                } 
                if (station.properties.HS > 200) {
                    highlightClass = "snow-201to300"
                }

                let snowIcon = L.divIcon({ //https://docs.eegeo.com/eegeo.js/v0.1.780/docs/leaflet/L.DivIcon/ - Represents a lightweight icon for markers that uses a simple div element instead of an image.
                    html: `<div class="snow-label ${highlightClass}">${station.properties.HS}</div>`
                })
                let snowMarker = L.marker([
                    station.geometry.coordinates[1],
                    station.geometry.coordinates[0]
                ], {
                    icon: snowIcon
                });
                snowMarker.addTo(snowLayer);
            }

                // Air Layer
            if (station.properties.LT) {
                let AirHighlightClass = '';
                if (station.properties.LT <0) {
                    AirHighlightClass = 'Air-neg';
                }

                if (station.properties.LT === 0) {
                    AirHighlightClass = 'Air-null';

                if (station.properties.LT > 0) {
                    AirHighlightClass = 'Air-pos';
                }
                let AirIcon = L.divIcon({
                    html: `<div class="Air-label ${AirHighlightClass}">${station.properties.LT}</div>`,
                });
                let AirMarker = L.marker([
                    station.geometry.coordinates[1],
                    station.geometry.coordinates[0]
                ], {
                    icon: AirIcon
                });
                AirMarker.addTo(Layer);
            }
            



if (station.properties.HS <= 10) {
                    highlightClass = 'snow-1to10';
                }
                if (station.properties.HS <= 25) {
                    highlightClass = "snow-10to25"
                }
                if (station.properties.HS <= 50) {
                    highlightClass = "snow-26to50"
                }
                if (station.properties.HS <= 100) {
                    highlightClass = "snow-51to100"
                }
                if (station.properties.HS = 200) {
                    highlightClass = "snow-101to200"
                }
                if (station.properties.HS > 200) {
                    highlightClass = "snow-201to300"
                }



                      // DIRECTIONS HINZUFÜGEN
       let direction = getDirection(options.value, options.direction);
       let label = L.divIcon({
          html: `<div style="direction:${direction}">${options.value}</div>`,
          className: "text-label"
       })
let getDirection = (value, directionArrow) => {
};

let newLabelDirection = (coords, options) => {
    let color = getDirections(options.value, options.direction);
    let label = L.divIcon({
        html: `<div style="background-color:${direction}">${options.value}</div>`,
        className: "text-label"
    })

    let marker = L.marker([coords[1], coords[0]], {
        icon: label,
        title: `${options.station} (${coords[2]}m)`
    });
    return marker;
};

 //Windrichtung
            if (typeof station.properties.WR == "number") {
                let marker = newLabel(station.geometry.coordinates, {
                    value: getDirection(station.properties.WR, DIRECTIONS),
                    colors: COLORS.windspeed,
                    station: station.properties.name
                });
                marker.addTo(overlays.winddirection);
            }


//get Direction Funktion
let getDirection = (value, directionRamp) => {
    console.log("Wert:", value, "Direction:", directionRamp);  
    for (let rule of directionRamp) {
        if (value >= rule.min && value < rule.max) {
            return rule.col;
        }
    }
    return "black";

//Let direction 
      let direction = getDirection(options.value, options.directions);
    console.log("Wert", options.value, "bekommt Richtung", direction); 
      let label2 = L.divIcon({
          html: `<div style="background-color:${direction}">${options.value}</div>`,
          className: "text-label"
      })